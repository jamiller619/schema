{
  "name": "Schema",
  "scopeName": "source.schema",
  "patterns": [
    {
      "include": "#triple_comment"
    },
    {
      "include": "#double_comment"
    },
    {
      "include": "#model_block_definition"
    },
    {
      "include": "#config_block_definition"
    },
    {
      "include": "#enum_block_definition"
    },
    {
      "include": "#type_definition"
    }
  ],
  "repository": {
    "model_block_definition": {
      "begin": "^\\s*(model|type)\\s+([A-Za-z][\\w]*)\\s*({)",
      "name": "source.schema.embedded.source",
      "beginCaptures": {
        "1": {
          "name": "storage.type.model.schema"
        },
        "2": {
          "name": "entity.name.type.model.schema"
        },
        "3": {
          "name": "punctuation.definition.tag.schema"
        }
      },
      "patterns": [
        {
          "include": "#triple_comment"
        },
        {
          "include": "#double_comment"
        },
        {
          "include": "#field_definition"
        }
      ],
      "end": "\\s*\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.schema"
        }
      }
    },
    "enum_block_definition": {
      "begin": "^\\s*(enum)\\s+([A-Za-z][\\w]*)\\s+({)",
      "name": "source.schema.embedded.source",
      "beginCaptures": {
        "1": {
          "name": "storage.type.enum.schema"
        },
        "2": {
          "name": "entity.name.type.enum.schema"
        },
        "3": {
          "name": "punctuation.definition.tag.schema"
        }
      },
      "patterns": [
        {
          "include": "#triple_comment"
        },
        {
          "include": "#double_comment"
        },
        {
          "include": "#enum_value_definition"
        }
      ],
      "end": "\\s*\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.schema"
        }
      }
    },
    "config_block_definition": {
      "begin": "^\\s*(generator|datasource)\\s+([A-Za-z][\\w]*)\\s+({)",
      "name": "source.schema.embedded.source",
      "beginCaptures": {
        "1": {
          "name": "storage.type.config.schema"
        },
        "2": {
          "name": "entity.name.type.config.schema"
        },
        "3": {
          "name": "punctuation.definition.tag.schema"
        }
      },
      "patterns": [
        {
          "include": "#triple_comment"
        },
        {
          "include": "#double_comment"
        },
        {
          "include": "#assignment"
        }
      ],
      "end": "\\s*\\}",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.schema"
        }
      }
    },
    "assignment": {
      "patterns": [
        {
          "begin": "^\\s*(\\w+)\\s*(=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "variable.other.assignment.schema"
            },
            "2": {
              "name": "keyword.operator.terraform"
            }
          },
          "patterns": [
            {
              "include": "#value"
            },
            {
              "include": "#double_comment_inline"
            }
          ],
          "end": "\\n"
        }
      ]
    },
    "field_definition": {
      "name": "scalar.field",
      "patterns": [
        {
          "match": "^\\s*(\\w+)(\\s*:)?\\s+((?!(?:Int|String|DateTime|Bytes|Decimal|Float|Json|Boolean|ObjectId)\\b)\\b\\w+)?(Int|String|DateTime|Bytes|Decimal|Float|Json|Boolean|ObjectId)?(\\[\\])?(\\?)?(\\!)?",
          "captures": {
            "1": {
              "name": "variable.other.assignment.schema"
            },
            "2": {
              "name": "invalid.illegal.colon.schema"
            },
            "3": {
              "name": "variable.language.relations.schema"
            },
            "4": {
              "name": "support.type.primitive.schema"
            },
            "5": {
              "name": "keyword.operator.list_type.schema"
            },
            "6": {
              "name": "keyword.operator.optional_type.schema"
            },
            "7": {
              "name": "invalid.illegal.required_type.schema"
            }
          }
        },
        {
          "include": "#attribute_with_arguments"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "type_definition": {
      "patterns": [
        {
          "match": "^\\s*(type)\\s+(\\w+)\\s*=\\s*(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.type.schema"
            },
            "2": {
              "name": "entity.name.type.type.schema"
            },
            "3": {
              "name": "support.type.primitive.schema"
            }
          }
        },
        {
          "include": "#attribute_with_arguments"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "enum_value_definition": {
      "patterns": [
        {
          "match": "^\\s*(\\w+)\\s*",
          "captures": {
            "1": {
              "name": "variable.other.assignment.schema"
            }
          }
        },
        {
          "include": "#attribute_with_arguments"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "attribute_with_arguments": {
      "name": "source.schema.attribute.with_arguments",
      "begin": "(@@?[\\w\\.]+)(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.attribute.schema"
        },
        "2": {
          "name": "punctuation.definition.tag.schema"
        }
      },
      "patterns": [
        {
          "include": "#named_argument"
        },
        {
          "include": "#value"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.schema"
        }
      }
    },
    "attribute": {
      "name": "source.schema.attribute",
      "match": "(@@?[\\w\\.]+)",
      "captures": {
        "1": {
          "name": "entity.name.function.attribute.schema"
        }
      }
    },
    "array": {
      "name": "source.schema.array",
      "begin": "\\[",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.schema"
        }
      },
      "patterns": [
        {
          "include": "#value"
        }
      ],
      "end": "\\]",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.schema"
        }
      }
    },
    "value": {
      "name": "source.schema.value",
      "patterns": [
        {
          "include": "#array"
        },
        {
          "include": "#functional"
        },
        {
          "include": "#literal"
        }
      ]
    },
    "functional": {
      "name": "source.schema.functional",
      "begin": "(\\w+)(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.functional.schema"
        },
        "2": {
          "name": "punctuation.definition.tag.schema"
        }
      },
      "patterns": [
        {
          "include": "#value"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.schema"
        }
      }
    },
    "literal": {
      "name": "source.schema.literal",
      "patterns": [
        {
          "include": "#boolean"
        },
        {
          "include": "#number"
        },
        {
          "include": "#double_quoted_string"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "\\b(\\w)+\\b",
          "name": "support.constant.constant.schema"
        }
      ]
    },
    "map_key": {
      "name": "source.schema.key",
      "patterns": [
        {
          "match": "(\\w+)\\s*(:)\\s*",
          "captures": {
            "1": {
              "name": "variable.parameter.key.schema"
            },
            "2": {
              "name": "punctuation.definition.separator.key-value.schema"
            }
          }
        }
      ]
    },
    "named_argument": {
      "name": "source.schema.named_argument",
      "patterns": [
        {
          "include": "#map_key"
        },
        {
          "include": "#value"
        }
      ]
    },
    "triple_comment": {
      "begin": "///",
      "end": "$\\n?",
      "name": "comment.schema"
    },
    "double_comment": {
      "begin": "//",
      "end": "$\\n?",
      "name": "comment.schema"
    },
    "double_comment_inline": {
      "match": "//[^\\n]*",
      "name": "comment.schema"
    },
    "boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.schema"
    },
    "number": {
      "match": "((0(x|X)[0-9a-fA-F]*)|(\\+|-)?\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDdg]|UL|ul)?\\b",
      "name": "constant.numeric.schema"
    },
    "double_quoted_string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.double.start.schema"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "string.quoted.double.end.schema"
        }
      },
      "patterns": [
        {
          "include": "#string_interpolation"
        },
        {
          "match": "([\\w\\-\\/\\._\\\\%@:\\?=]+)",
          "name": "string.quoted.double.schema"
        }
      ],
      "name": "unnamed"
    },
    "string_interpolation": {
      "patterns": [
        {
          "begin": "\\$\\{",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.interpolation.start.schema"
            }
          },
          "end": "\\s*\\}",
          "endCaptures": {
            "0": {
              "name": "keyword.control.interpolation.end.schema"
            }
          },
          "name": "source.tag.embedded.source.schema",
          "patterns": [
            {
              "include": "#value"
            }
          ]
        }
      ]
    }
  }
}